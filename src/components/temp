{
    Dataset.filter(k => ((k.name === klinik) && (k.source === source))).map(komment => <div key={komment.index}>
        <p>Rezension-{komment.index + 1} : {komment.komment}</p>
        <p>Result: {komment.positive}</p>
    </div>
    )
}


{
    Dataset.map(komment => {
        if ((komment.klinik === klinik) && ((komment.source === source))) {
            return (<div key={komment.index}>
                <p>Rezension-{komment.index + 1} : {komment.komment}</p>
                <p>Result: {komment.positive}</p>
            </div>
            )
        }
        else {
            return (null)
        }

<h3>{source === 'klinikDe' ? 'Klinikbewertungen.de ' : source === 'googleMaps' ? 'Google Maps ' : source === 'Alle' ? 'Alle' : ''} {klinik ? 'Rezensionen von' : ''} {klinik}</h3>


            <h3>Klinik: {klinik}</h3>
            <h3>Source: {source === 'Beide' ? 'Klinikbewertungen.de und Google Maps' : source}</h3>


        if (source === 'googleMaps') {
            Data = Dataset.filter(k => (k.source === 'googleMaps'))
        } else if (source === 'klinikDe') {
            Data = Dataset.filter(k => (k.source === 'klinikDe'))
        }


        if (klinik !== 'Alle') {
            Data = Dataset.filter(k => (k.name === klinik))
        }

        if (source !== 'Alle') {
            Data = Dataset.filter(k => (k.source === source))
        }


        const Data = ((klinik === 'Alle') & (klinik === 'Alle')) ? Dataset :
            klinik !== 'Alle' ? Dataset.filter(k => (k.name === klinik)) :
                source !== 'Alle' ? Dataset.filter(k => (k.source === source)) :
                    Dataset.filter(k => (k.source === source & k.name === klinik)

                        <<<<<<>>>>>>> pagination

                    {
                            [...Array(pagesCount)].map((page, i) =>
                                <PaginationItem active={i === currentPage} key={i}>
                                    <PaginationLink onClick={e => handleClick(e, i)} href="#">
                                        {i + 1}
                                    </PaginationLink>
                                </PaginationItem>
                            )
                        }



                        < PaginationLink > - Total Pages : { pagesCount } - </PaginationLink >


                    <Input type="select" name="seite" id="seite" value={currentPage} onChange={(e) => handleSelect(e.target.value)} >
                        <option>Alle</option>
                        {pages.map((p, index) =>
                            <option key={index}>{p}</option>
                        )}
                    </Input>

                                        <select name="seite" id="seite" value={currentPage} onChange={(e) => handleSelect(e.target.value)} >
                        {pages.map((p, index) =>
                            <option key={index}>{p}</option>
                        )}
                    </select>


                    <Input type="select" name="source" id="source" value={source} onChange={(e) => handleSource(e.target.value)}>
                        <option>Alle</option>
                        <option value='klinikDe'>Klinikbewertungen.de</option>
                        <option value='googleMaps'>Google Maps</option>
                    </Input>





                    if ((source !== "Alle" && klinik !== "Alle")) {

            let Data = Dataset.filter(k => ((k.source === source) && (k.name === klinik)))
            //console.log('1 Data: ', Data)

            const pageSize = 5
            const pagesCount = Math.ceil(Data.length / pageSize);

            return (
                <ShowKommentare Dataset={Data} pageSize={pageSize} pagesCount={pagesCount} currentPage={currentPage} handlePageTop={handlePageTop} handlePageBottom={handlePageBottom} handlePageSelect={handlePageSelect} klinik={klinik} source={source} />
            )
        } else if (source === "Alle" && klinik !== "Alle") {

            let Data = Dataset.filter(k => k.name === klinik)
            //console.log('2 Data: ', Data)

            const pageSize = 5
            const pagesCount = Math.ceil(Data.length / pageSize);

            return (
                <ShowKommentare Dataset={Data} pageSize={pageSize} pagesCount={pagesCount} currentPage={currentPage} handlePageTop={handlePageTop} handlePageBottom={handlePageBottom} handlePageSelect={handlePageSelect} klinik={klinik} source={source} />
            )
        } else if (source !== "Alle" && klinik === "Alle") {

            let Data = Dataset.filter(k => k.source === source)
            //console.log('3 Data: ', Data)
            const pageSize = 5
            const pagesCount = Math.ceil(Data.length / pageSize);
            return (
                <ShowKommentare Dataset={Data} pageSize={pageSize} pagesCount={pagesCount} currentPage={currentPage} handlePageTop={handlePageTop} handlePageBottom={handlePageBottom} handlePageSelect={handlePageSelect} klinik={klinik} source={source} />
            )
        } else {

            let Data = Dataset
            //console.log('4 Data: ', Data)
            const pageSize = 5
            const pagesCount = Math.ceil(Data.length / pageSize);
            return (
                <ShowKommentare Dataset={Data} pageSize={pageSize} pagesCount={pagesCount} currentPage={currentPage} handlePageTop={handlePageTop} handlePageBottom={handlePageBottom} handlePageSelect={handlePageSelect} klinik={klinik} source={source} />
            )
        }


        -----



                if (klinik !== 'Alle') {

            Data = Data.filter(k => k.klinik === klinik)
            console.log('Data:', Data)

        }

        if (source !== 'Alle') {
            Data = Data.filter(k => k.source === source)
        }



        if (result !== 'Alle') {
            Data = Data.filter(k => k.positive === result)
        }



        <PaginationComponent handleClick={handlePageTop} handleSelect={handlePageSelect} currentPage={currentPage} pagesCount={pagesCount} />


                        {source === "Alle" &&
                    <Col >
                        <center>
                            <ChartSource data={data03} />
                        </center>
                    </Col>}

                        let sourceGoogle = 0
    let sourceKlinikDe = 0
    let data03 = []

    sourceGoogle = c.source === "googleMaps" ? (sourceGoogle + 1) : sourceGoogle

<em style={{ fontSize: 'small' }} className="mt-2">* Google Maps Data hat diese Atribute nicht!!</em>
                <em style={{ fontSize: 'small' }} className="mt-2">** Entweder einzelne Klinik oder eine Gruppe kann selektiert werden!</em>
                <em style={{ fontSize: 'small' }} className="mt-2">*** Klinikbewertungen.de Data hat diese Atribute nicht!!</em>
